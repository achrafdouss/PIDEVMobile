<?php

namespace PIDEV\EvenementBundle\Controller;

use FOS\UserBundle\FOSUserBundle;
use PIDEV\EvenementBundle\Controller\textlocal;
use PIDEV\EvenementBundle\Entity\Evenement;
use PIDEV\EvenementBundle\Entity\ParticiperEvent;
use PIDEV\EvenementBundle\Repository\ParticiperEventRepository;
use PIDEV\UserBundle\Entity\User;
use PIDEV\VoyageBundle\Entity\ReserverVoyage;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\Form\Form;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

/**
 * Evenement controller.
 *
 * @Route("evenement")
 */
class EvenementController extends Controller
{
    /**
     * Lists all evenement entities.
     *
     * @Route("/", name="evenement_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();
        $evenements = $em->getRepository('PIDEVEvenementBundle:Evenement')->findAll();

        return $this->render('@PIDEVEvenement/Default/index.html.twig', array(
            'evenements' => $evenements,
        ));
    }

    /**
     * Creates a new evenement entity.
     *
     * @Route("/new", name="evenement_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $evenement = new Evenement();
        $form = $this->createForm('PIDEV\EvenementBundle\Form\EvenementType', $evenement);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($evenement);
            $em->flush();
            $this->addFlash(
                'notice',
                'Your changes were saved!'
            );
            return $this->redirectToRoute('evenement_show', array('id_event' => $evenement->getIdEvent()));
        }

        return $this->render('PIDEVEvenementBundle:Default:new.html.twig', array(
            'evenement' => $evenement,
            'form' => $form->createView(),
        ));
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function AjoutAction(Request $request){
        $evenement= new Evenement();


        $Form=$this->createForm('PIDEV\EvenementBundle\Form\EvenementType',$evenement);
        $Form->handleRequest($request);

        //il ajoute et reste sur la mm page
        // utilise la medhode post nouvelle session qui vas enregistrer se qui est saisie das la form

        //la methode post nouvelle session pr garder ce qui est saisoe ds le form
        //form widget -> modifier le nom de label et  d'ajouter les input 1 par 1

        if($Form->isSubmitted() &&$Form->isValid()){
            $file = $evenement->getPhoto();

            /** @var UploadedFile $file */

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();



            // Move the file to the directory where brochures are stored
            $PhotoDir=$this->getParameter('kernel.root_dir').'/../web/uploads';
            $file->move($PhotoDir,$fileName);

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $evenement->setPhoto($fileName);

            $user = $this->container->get('security.token_storage')->getToken()->getUser();
            $user->getId();
            $evenement->setIdOwner($user);
            $em = $this->getDoctrine()->getManager(); //persist flush entityManager
            $em->persist($evenement);
            $em->flush();
            $this->addFlash(
                'notice',
                'Evenement ajouté avec succes!'
            );
            return $this->redirectToRoute('showevent', array('id_event' => $evenement->getIdEvent()));
        }

        return $this->render('PIDEVEvenementBundle:Default:new.html.twig',array('form'=>$Form->createView()));

    }

    /**
     * Finds and displays a evenement entity.
     *
     * @Route("/{id_event}", name="evenement_show")
     * @Method("GET")
     */
    public function showAction(Evenement $evenement)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        /**
         * @var user User
         */
        $em = $this->getDoctrine()->getManager();
        $participations=$em->getRepository('PIDEVEvenementBundle:ParticiperEvent')->findOneBy(array('id_inscrit'=>$user,'id_event'=>$evenement));

        return $this->render('PIDEVEvenementBundle:Default:show.html.twig', array(
            'evenement' => $evenement,
            'participations' =>  $participations,
        ));
    }



    /**
     * Displays a form to edit an existing evenement entity.
     *
     * @Route("/{idEvent}/edit", name="evenement_edit")
     * @Method({"GET", "POST"})
     */
    public function  modifAction(Request $request,$idEvent){
        $em= $this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:Evenement")->find($idEvent);
        $Form= $this->createForm('PIDEV\EvenementBundle\Form\EvenementType', $event);
        $Form->handleRequest($request);
        if ($Form->isSubmitted() && $Form->isValid())
        {

            // $file stores the uploaded PDF file
            /** @var UploadedFile $file */
            $file = $event->getPhoto();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            $PhotoDir=$this->getParameter('kernel.root_dir').'/../web/uploads';
            $file->move($PhotoDir,$fileName);

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $event->setPhoto($fileName);
            $em->persist($event);
            $em->flush();
            $this->addFlash(
                'notice',
                'Evenement modifié!'
            );
            return $this->redirectToRoute('showevent');
        }
        return $this->render('@PIDEVEvenement/Default/edit.html.twig',
            array('edit_form'=>$Form->createView()));
    }
    public function SupprimerAction( $idEvent){

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:Evenement")->find($idEvent);
        $em->remove($event);
        $em->flush();
        $this->addFlash(
            'notice',
            'Evenement supprimé!'
        );
        return $this->redirectToRoute('evenement_index');
    }





    public function RechercheEventAction(Request $request){
        $em = $this->getDoctrine()->getManager();

        $event= $em->getRepository('PIDEVEvenementBundle:Evenement')->findAll();
        if($request->isMethod('POST')){
            $nom=$request->get('nomEvenement');
            $event=$em->getRepository("PIDEVEvenementBundle:Evenement")->findBy(array("nomEvenement"=>$nom));

        }
        return $this->render('PIDEVEvenementBundle:Default:find.html.twig',array('evenements'=>$event));
    }

    public function MapAction( )
    {
        return $this->render('PIDEVEvenementBundle:Default:map.html.twig');

    }

    public function ParticiperAction(Request $request,$idEvent)
    {  $user = $this->container->get('security.token_storage')->getToken()->getUser();
        /**
         * @var user User
         */
        $em = $this->getDoctrine()->getManager();
        $participations=$em->getRepository('PIDEVEvenementBundle:ParticiperEvent')->findOneBy(array('id_inscrit'=>$user,'id_event'=>$idEvent));
        if ($participations!=null){return new Response("Deja Participé");}


      if ($request->isMethod('POST'))
      {


          $participer=new ParticiperEvent();

          $event=$em->getRepository('PIDEVEvenementBundle:Evenement')->find($idEvent);
          if ($event->getNbrplace()>=$request->get('nbre'))
          {
          $participer->setIdEvent($event);




          $participer->setIdInscrit($user);
          $participer->setDate(new \DateTime());
          $participer->setNbre($request->get('nbre'));
          $event->setNbrplace($event->getNbrplace()-$request->get('nbre'));

          $participer->setStatus(0);

          $em->persist($participer);
              $em->persist($event);
          $em->flush();
              $this->addFlash(
                  'notice',
                  'Participation en attente de confirmation vous serez notifier par SMS!'
              );
          return $this->redirectToRoute('evenement_show',array('id_event' => $idEvent));
          }
          else
          {echo '<script type="text/javascript">' . 'alert("Nombre de places Insuffisant ");' . '</script>';}
      }
      return $this->render('@PIDEVEvenement/Default/participer.html.twig',array());
    }

    public function showparticipationAction()
    {
        $em = $this->getDoctrine()->getManager();
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $participation=$em->getRepository('PIDEVEvenementBundle:ParticiperEvent')->findBy(array('id_inscrit'=>$user->getId()));
        return $this->render('@PIDEVEvenement/Default/listparticipation.html.twig',array('list'=>$participation));
    }


    public function listparticipantAction($idEvent)
    {
        $em = $this->getDoctrine()->getManager();
        $participant=$em->getRepository('PIDEVEvenementBundle:ParticiperEvent')->findBy(array('id_event'=>$idEvent));
        return $this->render('@PIDEVEvenement/Default/listparticipant.html.twig',array('list'=>$participant));
    }

    public function myeventsAction()
    {
        $em = $this->getDoctrine()->getManager();
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $evenements = $em->getRepository('PIDEVEvenementBundle:Evenement')->findBy(array('id_owner'=>$user->getId()));

        return $this->render('@PIDEVEvenement/Default/myevents.html.twig', array(
            'evenements' => $evenements,
        ));
    }

    public function AnnulerParticipationAction( $idEvent){

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:ParticiperEvent")->find($idEvent);
        $evenement=$em->getRepository("PIDEVEvenementBundle:Evenement")->find($event->getIdEvent()->getIdEvent());
        $evenement->setNbrplace($evenement->getNbrplace()+$event->getNbre());
        $em->persist($evenement);
        $em->remove($event);
        $em->flush();
        $this->addFlash(
            'notice',
            'Participation annulé!'
        );
        return $this->redirectToRoute('list');
    }

    public function ConfirmerParticipationAction( $idEvent){

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:ParticiperEvent")->find($idEvent);
        $event->setStatus(1);
        $em->persist($event);
        $em->flush();

        require('Textlocal.class.php');

        $Textlocal = new Textlocal(false, false, 'OKV0rd1N8yg-aavn5qZ0I1GbqEvKmTmWvEXb8ZVIOS');

        $numbers = array('00216'.strval($event->getIdInscrit()->getTelephone()));
        $sender = 'BonPlan';
        $message = 'Votre participation à l\'evenement '. $event->getIdEvent()->getNomEvenement().' a été confirmé';
        var_dump($message);
   //$response = $Textlocal->sendSms($numbers, $message, $sender);
      //  print_r($response);
        $this->addFlash(
            'notice',
            'Le participant a été informé par SMS'
        );
       return $this->redirectToRoute('participant',array('idEvent'=>$event->getIdEvent()->getIdEvent()));

    }
    /**
     * Lists all evenement entities.
     *
     * @Route("/admin/", name="evenement_admin_index")
     * @Method("GET")
     */
    public function indexAdminAction()
    {
        $em = $this->getDoctrine()->getManager();
        $evenements = $em->getRepository('PIDEVEvenementBundle:Evenement')->findAll();

        return $this->render('@PIDEVEvenement/Default/admin.html.twig', array(
            'evenements' => $evenements,
        ));
    }

public function findAllAction()
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVEvenementBundle:Evenement c'
        );
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }




public function findOneAction($id)
{
    $em = $this->getDoctrine()->getManager();
    $query = $em->createQuery(
        'SELECT c
    FROM PIDEVEvenementBundle:Evenement c WHERE c.id_owner = ?1'
    );
    $query->setParameter(1, $id);
    $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

    return new JsonResponse($events);
}



    public function apiParticiperAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $participation = new ParticiperEvent();
$event=$em->getRepository('PIDEVEvenementBundle:Evenement')->find($request->get('IdEvent'));
        $participation->setIdEvent($em->getRepository('PIDEVEvenementBundle:Evenement')->find($request->get('IdEvent')));
        $participation->setIdInscrit($em->getRepository('PIDEVUserBundle:User')->find($request->get('IdInscrit')));
        $participation->setNbre($request->get('nbre'));
        $participation->setDate(new \DateTime());
        $participation->setStatus(0);
$event->setNbrplace($event->getNbrplace()-$request->get('nbre'));
$em->persist($event);
        $em->persist($participation);
        $em->flush();
        $query = $em->createQuery(
            'SELECT c FROM PIDEVEvenementBundle:ParticiperEvent c WHERE c.id = ?1'               
        );
        $query->setParameter(1, $em->getRepository('PIDEVEvenementBundle:ParticiperEvent')->findOneBy(array("id_event"=>$participation->getIdEvent(),"id_inscrit"=>$participation->getIdInscrit()))->getId());
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }

    public function apiMesParticipationsAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVEvenementBundle:ParticiperEvent c where c.id_inscrit = ?1'
        );
        $query->setParameter(1, $id );
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }
        public function apiEventParticipationsAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVEvenementBundle:ParticiperEvent c where c.id_event = ?1'
        );
        $query->setParameter(1, $id );
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }

        public function ApiAnnulerParticipationAction( $idEvent){

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:ParticiperEvent")->find($idEvent);
        $evenement=$em->getRepository("PIDEVEvenementBundle:Evenement")->find($event->getIdEvent()->getIdEvent());
        $evenement->setNbrplace($evenement->getNbrplace()+$event->getNbre());
        $em->persist($evenement);
        $em->remove($event);
        $em->flush();
        return new Response();
    }

        public function ApiConfirmerParticipationAction( $idEvent){

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("PIDEVEvenementBundle:ParticiperEvent")->find($idEvent);
        $event->setStatus(1);
        $em->persist($event);
        $em->flush();

        require('textlocal.class.php');

        $Textlocal = new Textlocal(false, false, 'OKV0rd1N8yg-aavn5qZ0I1GbqEvKmTmWvEXb8ZVIOS');

        $numbers = array('00216'.strval($event->getIdInscrit()->getTelephone()));
        $sender = 'BonPlan';
        $message = 'Votre participation à l\'evenement '. $event->getIdEvent()->getNomEvenement().' a été confirmé';
       // dump($message);
        //        dump($numbers);

   //$response = $Textlocal->sendSms($numbers, $message, $sender);
      //  print_r($response);

       return new Response();

    }
    public function loginAction($username,$password,Request $request)
    {
        $servername = "localhost";
        $user = "root";
        $pass = "";
        $dbname = "pidev";
// Create connection
        $conn = new \mysqli($servername, $user, $pass, $dbname);
// Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        $user = array();
        $sql = "SELECT * FROM fos_user where username='".$username."'and password='".$password."{".$username."}"."'";
       // $sql = "SELECT * FROM fos_user where username='".$username."'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            // output data of each row
            while($row = $result->fetch_assoc()) {
                $row_array['id'] = $row['id'];
                $row_array['username'] = $row['username'];
                $row_array['email'] = $row['email'];
                $row_array['enabled'] = $row['enabled'];
                $row_array['password'] = $row['password'];
                $row_array['confirmation_token'] = $row['confirmation_token'];
                $row_array['nom'] = $row['nom'];
                $row_array['prenom'] = $row['prenom'];
                $row_array['addresse'] = $row['addresse'];
                $row_array['telephone'] = $row['telephone'];
                array_push($user,$row_array);
            }
        $serializer=new Serializer([new ObjectNormalizer()]);
        $formatted=$serializer->normalize($user);
        return new JsonResponse($formatted);
       // return $this->render('@PIDEVUser/Default/index.html.twig', array(
          //"user" => $user
        // ));
    }
}

public function apiUsersAction()
    {
        $servername = "localhost";
        $user = "root";
        $pass = "";
        $dbname = "pidev";
// Create connection
        $conn = new \mysqli($servername, $user, $pass, $dbname);
// Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        $user = array();
        $sql = "SELECT * FROM fos_user ";
       // $sql = "SELECT * FROM fos_user where username='".$username."'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            // output data of each row
            while($row = $result->fetch_assoc()) {
                $row_array['id'] = $row['id'];
                $row_array['username'] = $row['username'];
                $row_array['email'] = $row['email'];
                $row_array['enabled'] = $row['enabled'];
                $row_array['password'] = $row['password'];
                $row_array['confirmation_token'] = $row['confirmation_token'];
                $row_array['nom'] = $row['nom'];
                $row_array['prenom'] = $row['prenom'];
                $row_array['addresse'] = $row['addresse'];
                $row_array['telephone'] = $row['telephone'];
                array_push($user,$row_array);
            }
        $serializer=new Serializer([new ObjectNormalizer()]);
        $formatted=$serializer->normalize($user);
        return new JsonResponse($formatted);
       // return $this->render('@PIDEVUser/Default/index.html.twig', array(
          //"user" => $user
        // ));
    }
}


}
