<?php

namespace PIDEV\VoyageBundle\Controller;

use PIDEV\VoyageBundle\Entity\ReserverVoyage;
use PIDEV\VoyageBundle\Entity\Voyage;
use PIDEV\UserBundle\Entity\User;
use PIDEV\VoyageBundle\Form\RechercheVoyageType;
use PIDEV\VoyageBundle\Form\ReserverVoyageType;
use PIDEV\VoyageBundle\Form\VoyageType;
use SpryngApiHttpPhp\Exception\InvalidRequestException;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
require_once 'C:/xampp/htdocs/Our/vendor/autoload.php';

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use \DateTime;

class VoyageController extends Controller
{
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function AjoutVoyageAction(Request $request){



        $voyage= new Voyage();
        $Form=$this->createForm(VoyageType::class,$voyage);
        $Form->handleRequest($request);
        if ($Form->isSubmitted() && $Form->isValid()) {

            if ($voyage->getDateDepart()>= new \DateTime('now')&&$voyage->getDateArrivee()> $voyage->getDateDepart() && $voyage->getPrix()>0) {
                $user = $this->container->get('security.token_storage')->getToken()->getUser();
                /**
                 * @var $user User
                 */
                $user->getId();
                $voyage->setIdOwner($user);
                // $file stores the uploaded PDF file
                /** @var UploadedFile $file */
                $file = $voyage->getPhoto();

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                // Move the file to the directory where brochures are stored
                $PhotoDir=$this->getParameter('kernel.root_dir').'/../web/uploads';
                $file->move($PhotoDir,$fileName);

                // Update the 'brochure' property to store the PDF file name
                // instead of its contents
                $voyage->setPhoto($fileName);

                // ... persist the $product variable or any other work
                $em = $this->getDoctrine()->getManager();
                $em->persist($voyage);
                $em->flush();
                echo '<script type="text/javascript">' . 'alert("Ajout Avec Succes ");' . '</script>';
                return $this->redirectToRoute('_AfficherVoyage');
            }

            else
            {
                echo '<script type="text/javascript">' . 'alert("Erreur : Date Invalide ");' . '</script>';
            }

        }




        return $this->render('PIDEVVoyageBundle:Voyage:AjoutVoyage.html.twig',array('form'=>$Form->createView()));
    }


    public function AfficherVoyageAction(Request $request)
    {

        $em=$this->getDoctrine()->getManager();
        $voyage=$em->getRepository('PIDEVVoyageBundle:Voyage')->findAll();


        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $voyage, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/
        );
        return $this->render('PIDEVVoyageBundle:Voyage:AfficherVoyage.html.twig',
            array(
                'v'=>$pagination,'user'=>$this->getUser()
            ));
    }


    public function SupprimerVoyageAction( $idVoyage){

        $em=$this->getDoctrine()->getManager();
        $em->getRepository("PIDEVVoyageBundle:ReserverVoyage")->findDQLreservationParametre($idVoyage);
        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        $em->remove($voyage);
        $em->flush();


        return $this->redirectToRoute('_AfficherVoyage');
    }

    public function ModifierVoyageAction(Request $request,$idVoyage)
    {

        $em = $this->getDoctrine()->getManager();
        $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        $Form = $this->createForm(VoyageType::class, $voyage);
        $Form->handleRequest($request);
        if ($Form->isSubmitted() && $Form->isValid())
        {
            if ($voyage->getDateDepart()>= new \DateTime('now')&&$voyage->getDateArrivee()> $voyage->getDateDepart() && $voyage->getPrix()>0) {

                // $file stores the uploaded PDF file
                /** @var UploadedFile $file */
                $file = $voyage->getPhoto();

                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

                // Move the file to the directory where brochures are stored
                $PhotoDir = $this->getParameter('kernel.root_dir') . '/../web/uploads';
                $file->move($PhotoDir, $fileName);

                // Update the 'brochure' property to store the PDF file name
                // instead of its contents
                $voyage->setPhoto($fileName);
                $em->persist($voyage);
                $em->flush();
                echo '<script type="text/javascript">' . 'alert("Modification Avec Succes ");' . '</script>';
                return $this->redirectToRoute('_AfficherVoyage');
            }
            else{
                echo '<script type="text/javascript">' . 'alert("Date Invalide ");' . '</script>';
            }
        }
        return $this->render('PIDEVVoyageBundle:Voyage:ModifierVoyage.html.twig',
            array('form'=>$Form->createView()));
    }





        public function RechercheVoyageAction (Request $request){
            $form = $this->createForm(RechercheVoyageType::class);
            $form->handleRequest($request);
            $em = $this->getDoctrine()->getManager();
            $PrixMin = $form['PrixMin']->getData();
            $PrixMax = $form['PrixMax']->getData();
            $Destination = $form['Destination']->getData();
            $Categorie = $form['Categorie']->getData();
            $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche($PrixMin, $PrixMax, $Destination, $Categorie);
            if (empty($PrixMin) && (!empty($PrixMax)) && (!empty($Categorie)) && (!empty($Destination))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche2($PrixMax, $Destination, $Categorie);
            }
            if (empty($PrixMax) && (!empty($PrixMin)) && (!empty($Categorie)) && (!empty($Destination))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche3($PrixMin, $Destination, $Categorie);
            }
            if (empty($Categorie) && (!empty($PrixMin)) && (!empty($PrixMax)) && (!empty($Destination))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche4($PrixMin, $Destination, $PrixMax);
            }
            if (empty($Destination) && (!empty($PrixMin)) && (!empty($PrixMax)) && (!empty($Categorie))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche5($PrixMin, $Categorie, $PrixMax);
            }
            if (empty($Destination) && (empty($PrixMin)) && (!empty($PrixMax)) && (!empty($Categorie))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche6($Categorie, $PrixMax);
            }
            if (empty($Destination) && (empty($PrixMax)) && (!empty($PrixMin)) && (!empty($Categorie))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche7($Categorie, $PrixMin);
            }
            if (empty($Destination) && (empty($Categorie)) && (!empty($PrixMin)) && (!empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche8($PrixMax, $PrixMin);
            }
            if ((!empty($Destination)) && (!empty($PrixMin)) && (empty($PrixMax)) && (empty($Categorie))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche9($Destination, $PrixMin);
            }
            if ((!empty($Destination)) && (!empty($PrixMax)) && (empty($PrixMin)) && (empty($Categorie))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche10($Destination, $PrixMax);
            }
            if ((!empty($Destination)) && (!empty($Categorie)) && (empty($PrixMin)) && (empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche11($Destination, $Categorie);
            }
            if ((empty($Destination)) && (empty($Categorie)) && (empty($PrixMin)) && (!empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche12($PrixMax);
            }
            if ((empty($Destination)) && (empty($Categorie)) && (!empty($PrixMin)) && (empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche13($PrixMin);
            }
            if ((empty($Destination)) && (!empty($Categorie)) && (empty($PrixMin)) && (empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche14($Categorie);
            }
            if ((!empty($Destination)) && (empty($Categorie)) && (empty($PrixMin)) && (empty($PrixMax))) {
                $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->recherche15($Destination);
            }


            $paginator  = $this->get('knp_paginator');
            $pagination = $paginator->paginate(
                $voyage, /* query NOT result */
                $request->query->getInt('page', 1)/*page number*/,
                3/*limit per page*/
            );

        return $this->render('PIDEVVoyageBundle:Voyage:RechercherVoyage.html.twig',array('v'=>$pagination, 'form' => $form->createView(),'user'=>$this->getUser()));


    }



    public function ReserverVoyageAction(Request $request,$idVoyage)
    {
        $em = $this->getDoctrine()->getManager();
        $reserverVoyage = new ReserverVoyage();
        $form = $this->createForm( ReserverVoyageType::class, $reserverVoyage);

        $voyage=$em->getRepository('PIDEVVoyageBundle:Voyage')
            ->find($idVoyage);
        if ($form->handleRequest($request)->isValid() ){
            if (($reserverVoyage->getNbPlaceReserve() <= $voyage->getNbrPlace()) ) {

                $voyage->setNbrPlace($voyage->getNbrPlace() - $reserverVoyage->getNbPlaceReserve());
                $user = $this->container->get('security.token_storage')->getToken()->getUser();
                $em = $this->getDoctrine()->getManager();
                $em->persist($voyage);
                $em->flush();

                $reserverVoyage->setIdInscrit($user);
                $reserverVoyage->setIdVoyage($voyage);



                $em->persist($reserverVoyage);
                $em->flush();
                return $this->redirectToRoute('_AfficherVoyage');
            }
            else {
                echo '<script type="text/javascript">' . 'alert("Nombre de places Insuffisant ");' . '</script>';
            }
        }

        return $this->render(
            'PIDEVVoyageBundle:Voyage:ReserverVoyage.html.twig',
            array('f2' => $form->createView())
        );
    }




    public function AfficherReservationAction()
    {
        $reservation = $this->getDoctrine()
            ->getRepository('PIDEVVoyageBundle:ReserverVoyage')
            ->findAll();
        return $this->render('PIDEVVoyageBundle:Voyage:AfficherReservation.html.twig',
            array('r' => $reservation,'user'=>$this->getUser()));
    }






    public function AfficheDetailAction($idVoyage)
{
        $em= $this->getDoctrine()->getManager();

        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        return $this->render('@PIDEVVoyage/Voyage/AfficheDetail.html.twig', array(
            "v"=>$voyage,'user'=>$this->getUser()));
    }







    public function PDFReservationAction()
    {
        $reservation = $this->getDoctrine()
            ->getRepository('PIDEVVoyageBundle:ReserverVoyage')
            ->findAll();




        $snappy = $this->get('knp_snappy.pdf');

        $html = $this->renderView('PIDEVVoyageBundle:Voyage:pdf.html.twig', array('r'=> $reservation,'user'=>$this->getUser()));


        $filename = 'myFirstSnappyPDF';


        return new Response(
            $snappy->getOutputFromHtml($html),
            200,
            array('Content-Type'          => 'application/pdf', 'Content-Disposition'   => 'inline; filename="'.$filename.'.pdf"'));




    }

    public function AnnulerReservationAction($idReservation)
    {


        $em=$this->getDoctrine()->getManager();
        $reservation=$em->getRepository("PIDEVVoyageBundle:ReserverVoyage")->find($idReservation);

        $em->remove($reservation);
        $em->flush();
        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($reservation->getIdVoyage());
        var_dump($idReservation);


        $x=$voyage->getNbrPlace()+$reservation->getNbPlaceReserve();
        $voyage->setNbrplace($x);
        $em->persist($voyage);

        $em->flush();
        return $this->redirectToRoute('_AfficherVoyage');


    }



    //////////////////////////////////////////Methodes Admin////////////////////////////////



    public function AfficherVoyageAdminAction(Request $request)
    {

        $em=$this->getDoctrine()->getManager();
        $voyage=$em->getRepository('PIDEVVoyageBundle:Voyage')->findAll();


        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $voyage, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            6/*limit per page*/
        );
        return $this->render('PIDEVVoyageBundle:Voyage:AfficherVoyageAdmin.html.twig',
            array(
                'v'=>$pagination,'user'=>$this->getUser()
            ));
    }


    public function SupprimerVoyageAdminAction( $idVoyage){

        $em=$this->getDoctrine()->getManager();
        $em->getRepository("PIDEVVoyageBundle:ReserverVoyage")->findDQLreservationParametre($idVoyage);
        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        $em->remove($voyage);
        $em->flush();


        return $this->redirectToRoute('_AfficherVoyageAdmin');
    }

    public function ModifierVoyageAdminAction(Request $request,$idVoyage)
    {

        $em = $this->getDoctrine()->getManager();
        $voyage = $em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        $Form = $this->createForm(VoyageType::class, $voyage);
        $Form->handleRequest($request);
        if ($Form->isSubmitted() && $Form->isValid())
        {
            if ($voyage->getDateDepart()>= new \DateTime('now')&&$voyage->getDateArrivee()> $voyage->getDateDepart()) {

                // $file stores the uploaded PDF file
                /** @var UploadedFile $file */
                $file = $voyage->getPhoto();

                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

                // Move the file to the directory where brochures are stored
                $PhotoDir = $this->getParameter('kernel.root_dir') . '/../web/uploads';
                $file->move($PhotoDir, $fileName);

                // Update the 'brochure' property to store the PDF file name
                // instead of its contents
                $voyage->setPhoto($fileName);
                $em->persist($voyage);
                $em->flush();
                echo '<script type="text/javascript">' . 'alert("Modification Avec Succes ");' . '</script>';
                return $this->redirectToRoute('_AfficherVoyageAdmin');
            }
            else{
                echo '<script type="text/javascript">' . 'alert("Date Invalide ");' . '</script>';
            }
        }
        return $this->render('PIDEVVoyageBundle:Voyage:ModifierVoyageAdmin.html.twig',
            array('form'=>$Form->createView()));
    }






    public function AjoutVoyageMobileAction(Request $request){


        $em = $this->getDoctrine()->getManager();
        $voyage= new Voyage();




                $user = $this->container->get('security.token_storage')->getToken()->getUser();
                /**
                 * @var $user User
                 */
                $user->getId();
                $voyage->setIdOwner($user);

                $voyage->setPhoto($request->get('photo'));
                $voyage->setCategorie($request->get('categorie'));
                $voyage->setType($request->get('type'));
                $voyage->setNbrPlace($request->get('nbrPlace'));
                $voyage->setDateDepart(new \DateTime($request->get('dateDepart')) );
        $voyage->setDateArrivee(new \DateTime( $request->get('dateArrivee')));

                $voyage->setPrix($request->get('prix'));
                $voyage->setDescription($request->get('description'));
                $voyage->setDestination($request->get('destination'));


                // ... persist the $product variable or any other work

                $em->persist($voyage);
                $em->flush();

        return new JsonResponse();
    }

    public function AfficherAllVoyagesMAction()
    {
        $em=$this->getDoctrine()->getManager();

        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVVoyageBundle:Voyage c'
        );
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);

    }



    public function AfficheDetailMobileAction($idVoyage)
    {
        $em= $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVVoyageBundle:Voyage c WHERE c.id_voyage = ?1'
        );
        $query->setParameter(1, $idVoyage);
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);

    }

    public function ReserverVoyageMobileAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $Reservation = new ReserverVoyage();
        $voyage=$em->getRepository('PIDEVVoyageBundle:Voyage')->find($request->get('id_voyage'));
        $Reservation->setIdVoyage($em->getRepository('PIDEVVoyageBundle:Voyage')->find($request->get('id_voyage')));
        $Reservation->setIdInscrit($em->getRepository('PIDEVUserBundle:User')->find($request->get('IdInscrit')));
        $Reservation->setNbPlaceReserve($request->get('nbr_place_res'));
        $voyage->setNbrplace($voyage->getNbrplace()-$request->get('nbr_place_res'));
        $em->persist($voyage);
        $em->persist($Reservation);
        $em->flush();
        $query = $em->createQuery(
            'SELECT c FROM PIDEVVoyageBundle:ReserverVoyage c WHERE c.id_voyage = ?1'
        );
        $query->setParameter(1, $em->getRepository('PIDEVVoyageBundle:ReserverVoyage')->findOneBy(array("id_voyage"=>$Reservation->getIdVoyage(),"id_inscrit"=>$Reservation->getIdInscrit()))->getIdInscrit());
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }


    public function MesReservationsMobileAction($id_user)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVVoyageBundle:ReserverVoyage c where c.id_inscrit = ?1'
        );
        $query->setParameter(1, $id_user );
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }

    public function AnnulerReservationMobileAction($idRes){

        $em=$this->getDoctrine()->getManager();
        $reservation=$em->getRepository("PIDEVVoyageBundle:ReserverVoyage")->find($idRes);
        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($reservation->getIdVoyage());
        $voyage->setNbrplace($voyage->getNbrPlace()+$reservation->getNbPlaceReserve());
        $em->persist($voyage);
        $em->remove($reservation);
        $em->flush();
        return new Response();
    }


    public function findOneAction($id_voyage)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVVoyageBundle:Voyage c WHERE c.id_voyage = ?1'
        );
        $query->setParameter(1, $id_voyage);
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);
    }


    public function AfficheReservationDetailMobileAction($idRes)
    {
        $em= $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT c
    FROM PIDEVVoyageBundle:ReserverVoyage c where c.id_reservation = ?1'
        );
        $query->setParameter(1, $idRes);
        $events = $query->setHint(\Doctrine\ORM\Query::HINT_INCLUDE_META_COLUMNS, true)->getArrayResult();

        return new JsonResponse($events);

    }


    public function SupprimerVoyageMobileAction( $idVoyage){

        $em=$this->getDoctrine()->getManager();
        $em->getRepository("PIDEVVoyageBundle:ReserverVoyage")->findDQLreservationParametre($idVoyage);
        $voyage=$em->getRepository("PIDEVVoyageBundle:Voyage")->find($idVoyage);
        $em->remove($voyage);
        $em->flush();


        return new Response();
    }

}
