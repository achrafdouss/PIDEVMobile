<?php

namespace PIDEV\ProduitBundle\Controller;

use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
use PIDEV\ProduitBundle\Entity\CommandeProd;
use PIDEV\ProduitBundle\Entity\LikeProduit;
use PIDEV\ProduitBundle\Entity\Produit;
use PIDEV\ProduitBundle\Entity\ProduitFavories;
use PIDEV\ProduitBundle\Form\CommandeProdType;
use PIDEV\ProduitBundle\Form\ProduitFavoriesType;
use PIDEV\ProduitBundle\Form\ProduitType;
use PIDEV\ProduitBundle\Form\RechercheForm;
use PIDEV\RestaurantBundle\Entity\Commande;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\UploadedFile ;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Swift_Message;


class ProduitController extends Controller
{
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function AjoutAction(Request $request){
        $user = $this->getUser();
        if(!is_object($user) )
        {
            return  $this->redirectToRoute("fos_user_security_login");
        }

        $produit= new Produit();
        $Form=$this->createForm(ProduitType::class,$produit);
        $Form->handleRequest($request);
        //il ajoute et reste sur la mm page
        // utilise la medhode post nouvelle session qui vas enregistrer se qui est saisie das la form

        //la methode post nouvelle session pr garder ce qui est saisoe ds le form
        //form widget -> modifier le nom de label et  d'ajouter les input 1 par 1

        if($Form->isSubmitted() &&$Form->isValid()){
            $_SESSION['message'] = '<div style="height: 50px;> <div style="height: 50px;" class="alert-success"> <br><h2> Produit Ajout√© avec succee </h2> </div> </div>';
            $produit->setEtatProduit("en Stock");

            $file = $produit->getPhoto();

            /** @var UploadedFile $file */

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            $user = $this->container->get('security.token_storage')->getToken()->getUser();
            $user->getId();
            $produit->setIdOwner($user) ;

            // Move the file to the directory where brochures are stored
            $PhotoDir=$this->getParameter('kernel.root_dir').'/../web/uploads';
            $file->move($PhotoDir,$fileName);

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $produit->setPhoto($fileName);

            $em = $this->getDoctrine()->getManager(); //persist flush entityManager
            $em->persist($produit);
            $em->flush();
            $this->addFlash(
                'notice',
               'Ajout Avec Succee'
          );
            return $this->redirectToRoute('Rechercher_produit');}


        return $this->render('PIDEVProduitBundle:Produit:Ajout.html.twig',array('form'=>$Form->createView()));

    }
    function afficherJsonProduitAction( )
    {

        $em = $this->getDoctrine()->getManager();
        //$user=$em->getRepository('PIDEVUserBundle:User')->find($id);
        $produits = $em->getRepository('PIDEVProduitBundle:Produit')->findAll();
        $e = null;
        foreach ($produits as $produit) {
            $e[]=array(
                'id_produit'=>$produit->getIdProduit(),
                'categorieProduit'=>$produit->getCategorieProduit(),
                'nom_produit'=>$produit->getNomProduit(),
              'description'=>$produit->getDescription(),
               'prixProduit'=>$produit->getPrixProduit(),
                'photo'=>$produit->getPhoto(),
                'stockProduit'=>$produit->getStockProduit(),
                //  'Video'=>$experience->getVideos()[0]->getUrl(),
            );
            $limg = null;
        }
        $response = new JsonResponse();
        return $response->setData($e);
    }
    function DetailProduitJsonAction($id)
    {

        $em = $this->getDoctrine()->getManager();
        $produit = $em->getRepository('PIDEVProduitBundle:Produit')->find($id);
        $e = null;

        $e[]=array(
            'id_produit'=>$produit->getIdProduit(),
            'categorieProduit'=>$produit->getCategorieProduit(),
            'nom_produit'=>$produit->getNomProduit(),
            'description'=>$produit->getDescription(),
            'prixProduit'=>$produit->getPrixProduit(),
            'photo'=>$produit->getPhoto(),
            'stockProduit'=>$produit->getStockProduit(),
            'nom'=>$produit->getIdOwner(),
        );
        $limg = null;


        $response = new JsonResponse();
        return $response->setData($e);

    }


    public function AfficheAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $produits=$em->getRepository('PIDEVProduitBundle:Produit')->findAll();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        if (isset($_SESSION['message'])) {
            echo $_SESSION['message'];
            unset($_SESSION['message']);
        }
        return $this->render('PIDEVProduitBundle:Produit:affiche.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));
    }
    public function rechercheAction (Request $request){
        $em=$this->getDoctrine()->getManager();
        $produits=$em->getRepository("PIDEVProduitBundle:Produit")->findAll();
        $paginator = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        if ($request->isMethod('POST')) {
            $categorie = $request->get("categorie_produit");
            $paginator = $this->get('knp_paginator');
            $pagination = $paginator->paginate(
                $produits, /* query NOT result */
                $request->query->getInt('page', 1)/*page number*/,
                3/*limit per page*/);
            $pagination = $em->getRepository("PIDEVProduitBundle:Produit")->findBy(array("categorie_produit" => $categorie));
            }
        return $this->render("PIDEVProduitBundle:Produit:recherche2.html.twig",
            array('prod'=>$pagination ,'user'=>$this->getUser()));
    }

    public function RechercheDQLAction(Request $request){
        $em=$this->getDoctrine()->getManager();
        $voitures=$em->getRepository("PIDEVProduitBundle:Produit")->recherche($request->get("chose"));
        /* if ($request->isMethod('POST')) {
             $email = $request->get("email");
             $voitures = $em->getRepository("BoutiqueBundle:Reclamation")->findBy(array("email" => $email));
         }*/
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $voitures, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        return $this->render('PIDEVProduitBundle:Produit:recherche.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));

    }

    public function AfficheDetailAction($idProduit)
    {
        $em= $this->getDoctrine()->getManager();

        $produit=$em->getRepository("PIDEVProduitBundle:Produit")->find($idProduit);
        return $this->render('PIDEVProduitBundle:Produit:afficher.html.twig', array(
            "produits"=>$produit));
    }


    public function UpdateAction(Request $request,$id_produit){

        $em=$this->getDoctrine()->getManager();
        $produit=$em->getRepository("PIDEVProduitBundle:Produit")->find($id_produit);
        $Form=$this->createForm(ProduitType::class,$produit);
        $Form->handleRequest($request);
        if($Form->isSubmitted() &&$Form->isValid()){
            $file = $produit->getPhoto();

            /** @var UploadedFile $file */

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();



            // Move the file to the directory where brochures are stored
            $PhotoDir=$this->getParameter('kernel.root_dir').'/../web/uploads';
            $file->move($PhotoDir,$fileName);

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $produit->setPhoto($fileName);

            $em->persist($produit);
            $em->flush();
            $this->addFlash(
                'notice',
                'Modification Avec Succee'
            );
            return $this->redirectToRoute('Liste_produit'); }



        return $this->render('PIDEVProduitBundle:Produit:update.html.twig',
            array('form'=>$Form->createView()));

    }

    public function DeleteAction(Request $request, $id_produit){
        $produit=new Produit();
        $em=$this->getDoctrine()->getManager();
        $produit=$em->getRepository("PIDEVProduitBundle:Produit")->find($id_produit);
        $em->remove($produit);
        $em->flush();
        $this->addFlash(
            'notice',
            'Supprission Avec Succee'
        );
        return $this->redirectToRoute('Liste_produit');
    }







    public function NombrAimeAction()
    {
        $em = $this->getDoctrine()->getManager()
            ->getRepository('PIDEVProduitBundle:Produit')
            ->NbrAime();
        $serializer = new Serializer([new ObjectNormalizer()]);
        $formatted = $serializer->normalize($em);
        return new JsonResponse($formatted);
    }

        function ListerFavorisJsonAction($user)
        {

            $em = $this->getDoctrine()->getManager();
           // $user = $this->container->get('security.token_storage')->getToken()->getUser();
           // $user=$em->getRepository('PIDEVUserBundle:User')->find(1);

            $favories = $em->getRepository('PIDEVProduitBundle:ProduitFavories')->findBy(array ('id_owner' => $user ));


            $e = null;


            foreach ($favories as $fav) {
                $produit = $em->getRepository('PIDEVProduitBundle:Produit')->findBy(array('id_produit'=>$fav->getIdProduit())) ;
              foreach ($produit as $prod)
              {
                  $e[]=array(
                      'id_produit'=>$prod->getIdProduit(),
                      'categorieProduit'=>$prod->getCategorieProduit(),
                      'nom_produit'=>$prod->getNomProduit(),
                      'description'=>$prod->getDescription(),
                      'prixProduit'=>$prod->getPrixProduit(),
                      //'photo'=>$fav->getIdProduit()
                      'stockProduit'=>$prod->getStockProduit(),
                      'photo'=>$prod->getPhoto(),

                  );
              }

            }
            $response = new JsonResponse();
            return $response->setData($e);

    }

    function ListerMesProduitJsonAction($user)
    {

        $em = $this->getDoctrine()->getManager();
        // $user = $this->container->get('security.token_storage')->getToken()->getUser();
        // $user=$em->getRepository('PIDEVUserBundle:User')->find(1);

        $produit = $em->getRepository('PIDEVProduitBundle:Produit')->findBy(array ('id_owner' => $user ));


        $e = null;



            foreach ($produit as $prod)
            {
                $e[]=array(
                    'id_produit'=>$prod->getIdProduit(),
                    'categorieProduit'=>$prod->getCategorieProduit(),
                    'nom_produit'=>$prod->getNomProduit(),
                    'description'=>$prod->getDescription(),
                    'prixProduit'=>$prod->getPrixProduit(),
                    //'photo'=>$fav->getIdProduit()
                    'stockProduit'=>$prod->getStockProduit(),
                    'photo'=>$prod->getPhoto(),


                );


        }
        $response = new JsonResponse();
        return $response->setData($e);

    }

    function AjoutProduitMobileAction(Request $req)
    {

        $produit = new Produit();
        $em = $this->getDoctrine()->getManager();
        $produit->setCategorieProduit($req->get("categorieProduit"));
        $produit->setNomproduit($req->get("nom_produit"));
        $produit->setPrixproduit($req->get("prixProduit"));
        $produit->setStockProduit($req->get("stockProduit"));
        $produit->setDescription($req->get("description"));
        $produit->setPhoto($req->get("photo"));
        $user=$em->getRepository('PIDEVUserBundle:User')->find(2);

        $produit->setIdOwner($user);

        $em->persist($produit);
        $em->flush();

        $e=true;


        $response = new JsonResponse();
        return $response->setData($e);



    }

    public function SupprimerFavorisJsonAction($id)
    {
        $e=true;
        $em = $this->getDoctrine()->getManager();

        $favori = $em->getRepository("PIDEVProduitBundle:Produit")->find($id);



        $em->remove($favori);
        $em->flush();
        $response = new JsonResponse();
        return $response->setData($e);
    }



    public function SupprimerProduitJsonAction($idProduit)
    {
        $e=true;
        $em = $this->getDoctrine()->getManager();

        $favori = $em->getRepository("PIDEVProduitBundle:Produit")->find($idProduit);



        $em->remove($favori);
        $em->flush();
        $response = new JsonResponse();
        return $response->setData($e);
    }
        public function rechercheAjaxAction (Request $request,$nom){
            $em=$this->getDoctrine()->getManager();
            $modeles=$em->getRepository("PIDEVProduitBundle:Produit")->recherche($nom);
            /**
             * @var $paginator\knp\Component\Pager\Paginator
             */

            $paginator = $this->get('knp_paginator');
            $result=$paginator->paginate(
                $modeles,
                $request->query->getInt('page',1),
                $request->query->getInt('limit,4')
            );
            $s= new Serializer(array(new ObjectNormalizer()));
            $e=$s->normalize($result,'json');
            $response= new JsonResponse();
            return $response->setData(array('x'=>$e));
        }


    public function favorie2Action ($idproduit){
        $em = $this->getDoctrine()->getManager();
        $produits = new ProduitFavories();

        $produit=$em->getRepository('PIDEVProduitBundle:Produit')
            ->find($idproduit);

        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $em = $this->getDoctrine()->getManager();
        $produits->setIdOwner($user);
        $produits->setIdProduit($produit);

        $em->persist($produits);
        $em->flush();
        $this->addFlash(
            'notice',
            'Ajout aux favories avec succee'
        );
        return $this->redirectToRoute('Liste_favorie');
        }


    public function AfficheFavorieAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $produits=$em->getRepository('PIDEVProduitBundle:ProduitFavories')->findAll();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        return $this->render('PIDEVProduitBundle:Produit:listefavorie.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));
    }

    public function DeleteFavorieAction(Request $request, $id_favori){
        $produit=new ProduitFavories();
        $em=$this->getDoctrine()->getManager();
        $produit=$em->getRepository("PIDEVProduitBundle:ProduitFavories")->find($id_favori);
        $em->remove($produit);
        $em->flush();
        $this->addFlash(
            'notice',
            'Supprission de favorie Avec Succee'
        );
        return $this->redirectToRoute('Liste_favorie');
    }


    public function indexAction()
    {
        return $this->render('PIDEVProduitBundle:Default:index.html.twig');
    }


    public function ReserverProduitAction(Request $request,$idproduit)
    {
        $em = $this->getDoctrine()->getManager();
        $commandeProd = new CommandeProd();
        $form = $this->createForm( CommandeProdType::class, $commandeProd);
        $produit=$em->getRepository('PIDEVProduitBundle:Produit')
            ->find($idproduit);
        if ($form->handleRequest($request)->isValid() ){
            if (($commandeProd->getQuantite() <= $produit->getStockProduit()) ) {
                $produit->setStockProduit($produit->getStockProduit()- $commandeProd->getQuantite());
                $user = $this->container->get('security.token_storage')->getToken()->getUser();
                $commandeProd->setIdAcheteur($user);
                $commandeProd->setIdProduit($produit);
                $em->persist($commandeProd);
                $em->flush();
                $this->addFlash(
                    'notice',
                    'Reservation Avec Succee'
                );
                return $this->render('@PIDEVProduit/Produit/commanderproduit.html.twig',array('commande' => $commandeProd));
            }
            else {
                echo '<script type="text/javascript">' . 'alert("Stock Insuffisant ");' . '</script>';
            }
        }

        return $this->render('PIDEVProduitBundle:Produit:commanderp.html.twig', array('f2' => $form->createView()));
    }

    function CommanderJsonAction(Request $request,$idB )
    {
        $em = $this->getDoctrine()->getManager();
        $commandeProd = new CommandeProd();
        $produit=$em->getRepository('PIDEVProduitBundle:Produit')
            ->find($idB);
        $commandeProd->setIdProduit($produit->getIdProduit());
        $commandeProd->setQuantite($request->get("quantite"));
                $produit->setStockProduit($produit->getStockProduit()- $commandeProd->getQuantite());
               // $user = $this->container->get('security.token_storage')->getToken()->getUser();
                $user=$em->getRepository('PIDEVUserBundle:User')->find(1);

                $commandeProd->setIdAcheteur($user);
                $commandeProd->setIdProduit($produit);
                $em->persist($commandeProd);
                $em->flush();
                $e=true;

        $response = new JsonResponse();
        return $response->setData($e);
    }


    function FavorisJsonAction(Request $req,$idB)
    {
        $em = $this->getDoctrine()->getManager();
        $produits = new ProduitFavories();

        $produit=$em->getRepository('PIDEVProduitBundle:Produit')
            ->find($idB);
       // $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $user=$em->getRepository('PIDEVUserBundle:User')->find(2);

        $em = $this->getDoctrine()->getManager();
        $produits->setIdOwner($user);
        $produits->setIdProduit($produit);

        $em->persist($produits);
        $em->flush();
        $e=true;


        $response = new JsonResponse();
        return $response->setData($e);
    }




    public function nomSortAction(Request $request){
        $em=$this->getDoctrine()->getManager();
        $repository=$em->getRepository('PIDEVProduitBundle:Produit');
        $query=$em->createQueryBuilder()
            ->select ('p')->from ('PIDEVProduitBundle:Produit','p')
            ->orderBy('p.nom_produit','ASC')
            ->getQuery();

        $produits=$query->getResult();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        return $this->render('PIDEVProduitBundle:Produit:affiche.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));

    }



    public function prixSortAction(Request $request){
        $em=$this->getDoctrine()->getManager();
        $repository=$em->getRepository('PIDEVProduitBundle:Produit');
        $query=$em->createQueryBuilder()
            ->select ('p')->from ('PIDEVProduitBundle:Produit','p')
            ->orderBy('p.prix_produit','ASC')
            ->getQuery();

        $produits=$query->getResult();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        return $this->render('PIDEVProduitBundle:Produit:affiche.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));

    }

    public function prixSort2Action(Request $request){
        $em=$this->getDoctrine()->getManager();
        $repository=$em->getRepository('PIDEVProduitBundle:Produit');
        $query=$em->createQueryBuilder()
            ->select ('p')->from ('PIDEVProduitBundle:Produit','p')
            ->orderBy('p.prix_produit','Desc')
            ->getQuery();

        $produits=$query->getResult();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        return $this->render('PIDEVProduitBundle:Produit:affiche.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));

    }
    public function grapheAction()
    {
        $pieChart = new PieChart();
        $em= $this->getDoctrine();
        $classes = $em->getRepository(Produit::class)->findAll();
        $totalEtudiant=0;
        foreach($classes as $classe) {
            $totalEtudiant=$totalEtudiant+$classe->getStockProduit();
        }
        $data= array();
        $stat=['categories', 'stock'];
        $nb=0;
        array_push($data,$stat);
        foreach($classes as $classe) {
            $stat=array();
            array_push($stat,$classe->getCategorieProduit(),(($classe->getStockProduit()) *100)/$totalEtudiant);
            $nb=($classe->getStockProduit() *100)/$totalEtudiant;
            $stat=[$classe->getCategorieProduit(),$nb];
            array_push($data,$stat);
        }
        $pieChart->getData()->setArrayToDataTable(
            $data
        );
        $pieChart->getOptions()->setTitle('Pourcentages de produit par stock');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);
        return $this->render('PIDEVProduitBundle:Produit:satatistique.html.twig', array('piechart' =>
            $pieChart));
    }
    public function grapheJsonAction()
    {
        $pieChart = new PieChart();
        $em= $this->getDoctrine();
        $classes = $em->getRepository(Produit::class)->findAll();
        $totalEtudiant=0;
        foreach($classes as $classe) {
            $totalEtudiant=$totalEtudiant+$classe->getStockProduit();
        }
        $data= array();
        $stat=['categories', 'stock'];
        $nb=0;
        array_push($data,$stat);
        foreach($classes as $classe) {
            $stat=array();
            array_push($stat,$classe->getCategorieProduit(),(($classe->getStockProduit()) *100)/$totalEtudiant);
            $nb=($classe->getStockProduit() *100)/$totalEtudiant;
            $stat=[$classe->getCategorieProduit(),$nb];
            array_push($data,$stat);
        }
        $pieChart->getData()->setArrayToDataTable(
            $data
        );
        $pieChart->getOptions()->setTitle('Pourcentages de produit par stock');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);
        $e=true;
        $response = new JsonResponse();
        return $response->setData($e);
    }

    public function LikeAction(Request $request, $id)
    {
        if ($request->isXmlHttpRequest()) {
            $user = $this->getUser();
            $em = $this->getDoctrine()->getManager();
            $produit = $em->getRepository("PIDEVProduitBundle:Produit")->find($id);
            $like = new LikeProduit();
            $like->setIdOwner($user);
            $like->setIdProduit($produit);
            $em->persist($like);
            $em->flush();
            $this->addFlash(
                'notice',
                'Merce pour le j aime'
            );

            return new JsonResponse($like);
        } else
            return new Response('Error!', 400);
    }

    public function DislikeAction(Request $request, $id)
    {
        if ($request->isXmlHttpRequest()) {
            $user = $this->getUser();
            $em = $this->getDoctrine()->getManager();
            $like = $em->getRepository("PIDEVProduitBundle:Produit")->findOneBy(array(
                'id_produit' => $id,
                'id_owner' => $user->getId()
            ));
            $em->remove($like);
            $em->flush();
            $this->addFlash(
                'notice',
                'Merci :O'
            );
            return new JsonResponse($like);
        } else
            return new Response('Error!', 400);
    }


    public function mail2Action(Request $request,$mailto)
    {   $user = $this->container->get('security.token_storage')->getToken()->getUser();
       var_dump($mailto);
    $message = \Swift_Message::newInstance()
            ->setSubject('Commande valider')
            ->setFrom($user->getEmail())
            ->setTo($mailto)
            ->setBody('une Commande a √©t√© effectuer par un produit que vous avez poster. Merci de consulter votre stock
            Merci d\'avoir poster votre produit');


        ;
        $this->get('mailer')->send($message);


        return $this->redirectToRoute('mailsucce');
    }
    public function succesAction(){
        return new Response("email envoy√© avec succ√®s, a fin d'informer le propri√©taire de produit de votre commande.
        Merci pour votre fid√©lit√©.");
    }


    public function DeleteAdminAction(Request $request, $id_produit){
        $produit=new Produit();
        $em=$this->getDoctrine()->getManager();
        $produit=$em->getRepository("PIDEVProduitBundle:Produit")->find($id_produit);
        $em->remove($produit);
        $em->flush();
        $this->addFlash(
            'notice',
            'Supprission Avec Succee'
        );
        return $this->redirectToRoute('ListeAdminproduit');
    }

    public function AfficheAdminAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $produits=$em->getRepository('PIDEVProduitBundle:Produit')->findAll();
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $produits, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/);
        if (isset($_SESSION['message'])) {
            echo $_SESSION['message'];
            unset($_SESSION['message']);
        }
        return $this->render('PIDEVProduitBundle:Produit:AfficheAdmin.html.twig',
            array(
                'prod'=>$pagination,'user'=>$this->getUser()
            ));
    }

    public function DeleteAdminPAction(Request $request, $id_produit){
        $produit=new Produit();
        $em=$this->getDoctrine()->getManager();
        $produit=$em->getRepository("PIDEVProduitBundle:Produit")->find($id_produit);
        $em->remove($produit);
        $em->flush();
        $this->addFlash(
            'notice',
            'Supprission Avec Succee'
        );
        return $this->redirectToRoute('ListeAdminproduit');
    }
}
